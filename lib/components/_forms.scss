// Forms
// --------------------------------------------------

// `<input>` background color
$input-bg:                       #fff;
// `<input disabled>` background color
$input-bg-disabled:              $lightgray;

// Text color for `<input>`s
$input-color:                    $midgray;
// `<input>` border color
$input-border:                   #ccc;

// Default `.form-control` border radius
$input-border-radius-base:            3px;
// Large `.form-control` border radius
$input-border-radius-large:      4px;
// Small `.form-control` border radius
$input-border-radius-small:      2px;

// Border color for inputs on focus
$input-border-focus:             $lightblue;

// Placeholder text color
$input-color-placeholder:        #999;

// Default `.form-control` height
$input-height-base:              ($base-line-height + (2px * 2) + 2);
// Large `.form-control` height
$input-height-large:             30px;
// Small `.form-control` height
$input-height-small:             20px;

$legend-color:                   $darkgray;
$legend-border-color:            #e5e5e5;

// Background color for textual input addons
$input-group-addon-bg:           $lightgray;
// Border color for textual input addons
$input-group-addon-border-color: $input-border;

// Disabled cursor for form controls and buttons.
$cursor-disabled: not-allowed;


// Form control focus state
@mixin form-control-focus($color: $input-border-focus) {
  $color-rgba: rgba(red($color), green($color), blue($color), .6);
  &:focus {
    border-color: $color;
    outline: 0;
    @include box-shadow("inset 0 1px 1px rgba(0,0,0,.075), 0 0 8px ${color-rgba}");
  }
}

// Form control sizing
@mixin input-size($parent, $input-height, $padding-vertical, $padding-horizontal, $font-size, $border-radius) {
  #{$parent} {
    height: $input-height;
    padding: $padding-vertical $padding-horizontal;
    @include type-scale($font-size);
    border-radius: $border-radius;
  }

  select#{$parent} {
    height: $input-height;
    line-height: $input-height;
    option {
      height:$input-height;
      line-height:$input-height;
    }
  }

  textarea#{$parent},
  select[multiple]#{$parent} {
    height: auto;
  }
}

// Placeholder text
@mixin placeholder($color: $input-color-placeholder) {
  &::-moz-placeholder {
    color: $color;
    opacity: 1;
  }
  &:-ms-input-placeholder { color: $color; }
  &::-webkit-input-placeholder  { color: $color; }
}

// Normalize form elements
fieldset {
  padding: 0;
  margin: 0;
  border: 0;
  min-width: 0;
}

legend {
  display: block;
  width: 100%;
  padding: 0;
  margin-bottom: margin-trailer(0.5);
  @include type-scale(base);
  color: $legend-color;
  border: 0;
  border-bottom: 1px solid $legend-border-color;
}

label {
  display: inline-block;
  max-width: 100%; // Force IE8 to wrap long content (see https://github.com/twbs/bootstrap/issues/13141)
  margin-bottom: 5px;
  font-weight: bold;
  @include type_scale(base);
}

// Override content-box in Normalize (* isn't specific enough)
input[type="search"] {
  box-sizing:border-box;
}

// Position radios and checkboxes better
input[type="radio"],
input[type="checkbox"] {
  margin: 4px 0 0;
  margin-top: 1px \9; // IE8-9
  line-height: normal;
}

// Set the height of file controls to match text inputs
input[type="file"] {
  display: block;
}

// Make range inputs behave like textual form controls
input[type="range"] {
  display: block;
  width: 100%;
}

// Make multiple select elements height not fixed
select[multiple],
select[size] {
  height: auto;
}

// Focus for file, radio, and checkbox
input[type="file"]:focus,
input[type="radio"]:focus,
input[type="checkbox"]:focus {
  outline: thin dotted; // Default
  outline: 5px auto -webkit-focus-ring-color; // WebKit
  outline-offset: -2px;
}

// Adjust output element
output {
  display: block;
  padding-top: ($padding-base-vertical + 1);
  @include type-scale(base);
  color: $input-color;
}

.form-wrap {
  padding:rhythm(0.45);
  background-color: $offwhite;
  margin:rhythm(0.9) 0;
}


// Common form controls
//
// Shared size and type resets for form controls. Apply `.form-control` to any
// of the following form controls:
//
// select
// textarea
// input[type="text"]
// input[type="password"]
// input[type="datetime"]
// input[type="datetime-local"]
// input[type="date"]
// input[type="month"]
// input[type="time"]
// input[type="week"]
// input[type="number"]
// input[type="email"]
// input[type="url"]
// input[type="search"]
// input[type="tel"]
// input[type="color"]

.form-control {
  display: block;
  width: 100%;
  height: $input-height-base; // Make inputs at least the height of their button counterpart (base line-height + padding + border)
  padding: 0 $padding-base-horizontal;
  @include type-scale(base);
  color: $input-color;
  background-color: $input-bg;
  background-image: none; // Reset unusual Firefox-on-Android default style; see https://github.com/necolas/normalize.css/issues/214
  border: 2px solid $input-border;
  border-radius: $input-border-radius-base;
  @include box-shadow(inset 0 1px 1px rgba(0,0,0,.075));
  @include transition('border-color ease-in-out .15s, box-shadow ease-in-out .15s');
  @include form-control-focus();
  @include placeholder();

  // Disabled and read-only inputs
  &[disabled],
  &[readonly] {
    cursor: $cursor-disabled;
    background-color: $input-bg-disabled;
    opacity: 1; // iOS fix - unreadable disabled content
  }

}

// Reset height for textarea
textarea.form-control {
  height: auto;
}

fieldset[disabled] .form-control {
  cursor: $cursor-disabled;
  background-color: $input-bg-disabled;
  opacity: 1; // iOS fix - unreadable disabled content
}

// Search inputs in iOS
input[type="search"] {
  -webkit-appearance: none;
}

// Special styles for iOS inputs
@media screen and (-webkit-min-device-pixel-ratio: 0) {
  input[type="date"],
  input[type="time"],
  input[type="datetime-local"],
  input[type="month"] {
    line-height: $input-height-base;
  }
  input[type="date"].input-sm,
  input[type="time"].input-sm,
  input[type="datetime-local"].input-sm,
  input[type="month"].input-sm {
    line-height: $input-height-small;
  }
  input[type="date"].input-lg,
  input[type="time"].input-lg,
  input[type="datetime-local"].input-lg,
  input[type="month"].input-lg {
    line-height: $input-height-large;
  }
}


// Form groups
.form-group {
  margin-bottom: 15px;
}

.form-group--last {
  margin-bottom:40px;
}

// Checkboxes and radios
.radio {
  position: relative;
  display: block;
  margin-top: 10px;
  margin-bottom: 10px;
  padding-left:20px;
  cursor: pointer;

  label {
    min-height: $base-line-height; // Ensure the input doesn't jump when there is no text
    margin-bottom: 0;
    font-weight: normal;
    cursor: pointer;
  }
}
.radio input[type="radio"],
.radio-inline input[type="radio"],
.checkbox-inline input[type="checkbox"] {
  position: absolute;
  left: 0;
  top:8px;
  margin-top: 4px \9;
}

.radio + .radio,
.checkbox + .checkbox {
  margin-top: -5px; // Move up sibling radios or checkboxes for tighter spacing
}

// Radios and checkboxes on same line
.radio-inline,
.checkbox-inline {
  display: inline-block;
  padding-left: 20px;
  margin-bottom: 0;
  vertical-align: middle;
  font-weight: normal;
  cursor: pointer;
}
.radio-inline + .radio-inline,
.checkbox-inline + .checkbox-inline {
  margin-top: 0;
  margin-left: 10px; // space out consecutive inline controls
}

// Apply same disabled cursor tweak as for inputs
input[type="radio"],
input[type="checkbox"] {
  &[disabled],
  &.disabled,
  fieldset[disabled] & {
    cursor: $cursor-disabled;
  }
}
// These classes are used directly on <label>s
.radio-inline,
.checkbox-inline {
  &.disabled,
  fieldset[disabled] & {
    cursor: $cursor-disabled;
  }
}
// These classes are used on elements with <label> descendants
.radio,
.checkbox {
  &.disabled,
  fieldset[disabled] & {
    label {
      cursor: $cursor-disabled;
    }
  }
}


// Static form control text
.form-control-static {
  padding-top: ($padding-base-vertical + 1);
  padding-bottom: ($padding-base-vertical + 1);
  margin-bottom: 0;
  &.input-lg,
  &.input-sm {
    padding-left: 0;
    padding-right: 0;
  }
}


// Form control sizing
//
// Build on `.form-control` with modifier classes to decrease or increase the
// height and font-size of form controls.
@include input-size('.input-sm, .form-group-sm .form-control', $input-height-small, $padding-small-vertical, $padding-small-horizontal, 'base', $input-border-radius-small);

@include input-size('.input-lg, .form-group-lg .form-control',$input-height-large, $padding-large-vertical, $padding-large-horizontal, 'large', $input-border-radius-large);

// Help text
//
// Apply to any element you wish to create light text for placement immediately
// below a form control. Use for general help, formatting, or instructional text.
.help-block {
  display: block;
  margin-top: 5px;
  margin-bottom: 10px;
  color: lighten($midgray, 25%);
  @include set-font();
  @include type-scale(base);
}

// Inline forms
//
// Make forms appear inline(-block) by adding the `.form-inline` class. Inline
// forms begin stacked on extra small (mobile) devices and then go inline when
// viewports reach <768px.
//
// Requires wrapping inputs and labels with `.form-group` for proper display of
// default HTML form controls and our custom form controls (e.g., input groups).
//
// Heads up! This is mixin-ed into `.navbar-form` in navbars.less.

.form-inline {
  @include breakpoint(sm) {
    .form-group {
      display: inline-block;
      margin-bottom: 0;
      vertical-align: middle;
    }

    // In navbar-form, allow folks to *not* use `.form-group`
    .form-control {
      display: inline-block;
      width: auto; // Prevent labels from stacking above inputs in `.form-group`
      vertical-align: middle;
    }

    // Make static controls behave like regular ones
    .form-control-static {
      display: inline-block;
    }

    .input-group {
      display: inline-table;
      vertical-align: middle;

      .input-group-addon,
      .input-group-btn,
      .form-control {
        width: auto;
      }
    }

    // Input groups need that 100% width though
    .input-group > .form-control {
      width: 100%;
    }

    .control-label {
      margin-bottom: 0;
      vertical-align: middle;
    }

    // Remove default margin on radios/checkboxes that were used for stacking, and
    // then undo the floating of radios and checkboxes to match (which also avoids
    // a bug in WebKit: https://github.com/twbs/bootstrap/issues/1969).
    .radio,
    .checkbox {
      display: inline-block;
      margin-top: 0;
      margin-bottom: 0;
      vertical-align: middle;

      label {
        padding-left: 0;
      }
    }
    .radio input[type="radio"],
    .checkbox input[type="checkbox"] {
      position: relative;
      margin-left: 0;
    }

    // Re-override the feedback icon.
    .has-feedback .form-control-feedback {
      top: 0;
    }
  }
}


// Horizontal forms
//
// Horizontal forms are built on grid classes and allow you to create forms with
// labels on the left and inputs on the right.

.form-horizontal {

  // Vertical alignment of radios and checkboxes
  .radio,
  .checkbox,
  .radio-inline,
  .checkbox-inline {
    margin-top: 0;
    margin-bottom: 0;
    padding-top: ($padding-base-vertical + 1); // Default padding plus a border
  }
  // Account for padding we're adding to ensure the alignment and of help text
  // and other content below items
  .radio,
  .checkbox {
    min-height: ($base-line-height + ($padding-base-vertical + 1));
  }


  // Reset spacing and right align labels, but scope to media queries so that
  // labels on narrow viewports stack the same as a default form example.
  @include breakpoint(sm) {
    // Make form groups behave like rows
    .form-group {
        @include clearfix();
        .form-control, .form-control-file {
            @include column($total-columns);
            width: 78%;
            margin-left:2%;
            float:left;
        }
    }

    .form-select-group {
      @include clearfix();
      width: 78%;
      margin-left:2%;
      float:left;
      p {
        margin-top:10px;
        margin-left:5px;
        clear:both;
      }
      .form-control {
          @include column($total-columns);
          float:left;
          margin-right:1%;
          margin-left:0;
          width:20%;
      }
      .form-select {
        @include column($total-columns);
        width:20%;
        float:left;
        margin-right:1%;
        margin-left:0;
        .form-control {
          width:100%;
          margin-left:0;
        }
      }
    }


    .control-label {
      clear:left;
      @include column($total-columns);
      width: 20%;
      text-align: right;
      margin-bottom: 0;
      padding-top: ($padding-base-vertical + 1); // Default padding plus a border
    }
    .btn-secondary {
      margin-left:22% !important;
    }
    // Form group sizes
    //
    // Quick utility class for applying `.input-lg` and `.input-sm` styles to the
    // inputs and labels within a `.form-group`.
    .form-group-lg {
        .control-label {
          padding-top: (($padding-large-vertical * 24) + 1);
        }
    }
    .form-group-sm {
        .control-label {
          padding-top: ($padding-small-vertical + 1);
        }
    }
  }

  // Validation states
  //
  // Reposition the icon because it's now within a grid column and columns have
  // `position: relative;` on them. Also accounts for the grid gutter padding.
  .has-feedback .form-control-feedback {
    right: ($gutter-width / 2);
  }
}

.form-section .btn {
    @include type_scale(medium);
    margin:10px 0;
}

.form-filter--standalone {
  margin-top:rhythm(.25);
  select[disabled], .control-disabled {
    color:#999;
  }
}